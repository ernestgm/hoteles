<script>

        /**
         * Create the query object we need to send to our API endpoint
         * from the table params.
         */
        createQuery = function (tableParams) {
            var query = {
                page: tableParams.page(),
                limit: tableParams.count()
            };

            // The orderBy is in the form ["+state", "-title"]
            // where '+' represents ascending and '-' descending
            // We need to convert it to the format accepted by our API
            _.each(tableParams.orderBy(), function (dirColumn) {
                var key = 'sorting[' + dirColumn.slice(1) + ']';
                query[key] = (dirColumn[0] === '+') ? 'asc' : 'desc';
            });
            _.each(tableParams.filter(), function (value, index) {
                if (value != '') {
                    var key = 'filter[' + index + ']';
                    query[key] = value;
                }
            });

            return query;
        };

        //Comentarios
        function CommentController($scope, $location, $http, NgTableParams) {
            var self = this;
            // Default values, usually fetched from the url
            // to allow direct access to the filtered table
            var sorting = {titulo: 'asc'};
            var page = 1;
            var count = 10;

            initData();

            function initData() {
                refreshData();
                $scope.$on('comments-table-updated', refresTable);
            }

            function refreshData() {

                self.tableParams = new NgTableParams(
                        { page: page, count: count, sorting: sorting },
                        {
                            total: 0,
                            getData: function (tableParams) {
                                return $http({
                                    url: '{{ path('comments_data') }}',
                                    method: 'GET',
                                    params: createQuery(tableParams)
                                }).then(
                                        // Success callback
                                        function (response) {
                                            var data = response.data;
                                            var comments = data._embedded.items;
                                            //UserService.Save(user);
                                            // Set the total number of products
                                            tableParams.total(data.total);
                                            return comments;
                                        }
                                );
                            }
                        }
                );
            }

            function refresTable(){
                self.tableParams.reload();
            }
        }

        //Hotel
        function HotelController($scope, $location, $http, NgTableParams, WSHotelService,SweetAlert) {
            var self = this;
            // Default values, usually fetched from the url
            // to allow direct access to the filtered table
            var sorting = {titulo: 'asc'};
            var page = 1;
            var count = 10;

            initData();

            function initData() {
                refreshData();
                $scope.$on('hotel-table-updated', refresTable);
            }

            function refreshData() {

                self.tableParams = new NgTableParams(
                        { page: page, count: count, sorting: sorting },
                        {
                            total: 0,
                            getData: function (tableParams) {
                                return $http({
                                    url: '{{ path('hotel_data') }}',
                                    method: 'GET',
                                    params: createQuery(tableParams)
                                }).then(
                                        // Success callback
                                        function (response) {
                                            var data = response.data;
                                            var hotel = data._embedded.items;
                                            //UserService.Save(user);
                                            // Set the total number of products
                                            tableParams.total(data.total);
                                            return hotel;
                                        }
                                );
                            }
                        }
                );

                $http.get('{{ path('ws_get_hotels') }}').success(
                        function (data) {
                            if (data.success == "OK")
                            {
                                WSHotelService.Save(data.results);
//                                WSHotelService.Save([data.hotel]);
                            }else{
                                SweetAlert.swal({
                                    title: "Registro de Hotel",
                                    text: '{{ 'Error en WebServices' }}',
                                    type: "error"
                                });
                            }
                        }
                );

            }

            function refresTable(){
                self.tableParams.reload();
            }
        }

        function HotelControllerAddEditController($scope, $modal, $stateParams, $http, ngTableParams, $state, SweetAlert, WSHotelService) {
            var ho = this;

            ho.title = '{{ 'Nuevo Hotel' | trans }}';

            ho.hotel = {};
            ho.show_loader = true;

            ho.selectId = selectId;
            ho.saveHotel = saveHotel;

            ho.hotel.hotel_selected = -1;
            ho.hotel.add_gast_show = 0;

            ho.hotel.hotel_data = null;
            ho.hotel.hotel_marca = {nombre:"",estilo:""};
            ho.hotel.hotel_th = null;
            ho.hotel.hotel_motivos = null;
            ho.hotel.hotel_gastronomia = null;

            ho.list_hotels = WSHotelService.GetAll();

            if (ho.list_hotels.length > 0){
                ho.show_loader = false;
            }

            ho.map = {
                center: { latitude: 22.1338, longitude: -79.4673 },
                zoom: 6,
                events: {
                    click: function (mapModel, eventName, originalEventArgs) {
                        // 'this' is the directive's scope

                        var e = originalEventArgs[0];
                        var lat = e.latLng.lat(),
                                lon = e.latLng.lng();

                        ho.latitud = lat;
                        ho.longitud = lon;

                        ho.marker = {
                            coords: { latitude: lat, longitude: lon },
                            events: {
                                dragend: function (marker, eventName, args) {
                                    console.log('marker dragend');
                                    ho.latitud = marker.getPosition().lat();
                                    ho.longitud = marker.getPosition().lng();
                                    ho.hotel.geolocalizacion = JSON.stringify([{latitud: marker.getPosition().lat()},{longitud: marker.getPosition().lng()}]);
                                }
                            }
                        };
                        ho.hotel.geolocalizacion = JSON.stringify([{latitud: ho.latitud},{longitud: ho.longitud}]);
                        //scope apply required because this event handler is outside of the angular domain
                        $scope.$evalAsync();
                    },
                }
            };
            ho.marker = {
                idKey:'1',
                coords: { latitude: 22.1338, longitude: -79.4673 },
                options: { draggable: true },
                events: {
                    dragend: function (marker, eventName, args) {
                        console.log('marker dragend');
                        ho.latitud = marker.getPosition().lat();
                        ho.longitud = marker.getPosition().lng();
                        ho.hotel.geolocalizacion = JSON.stringify([{latitud: marker.getPosition().lat()},{longitud: marker.getPosition().lng()}]);
                    }
                }
            };

            function selectId(index){
                ho.hotel.hotel_selected = index;
                ho.hotel.add_gast_show = 1;

                WSHotelService.AddMarca(index, ho.hotel.hotel_marca);
                ho.hotel.hotel_data = WSHotelService.GetById(index);

                ho.hotel.url = WSHotelService.generateName(ho.hotel.hotel_data.name);

                ho.hotel.hotel_marca = ho.hotel.hotel_data.brand;

                ho.hotel.hotel_th = ho.hotel.hotel_data.roomTypes.roomType;
                ho.hotel.hotel_servicios = ho.hotel.hotel_data.facilities.accommodationFacility;
                ho.hotel.hotel_motivos = ho.hotel.hotel_data.themes.themeLocalizationResult;


                if (ho.hotel.hotel_data.gastronomia){
                    ho.hotel.hotel_gastronomia = ho.hotel.hotel_data.gastronomia;
                }else{
                    ho.hotel.hotel_gastronomia = [];
                    ho.hotel.hotel_data.gastronomia = [];
                }
            }

            ho.listRoomServices = function(id, roomTypeId){
                var temp = $('#modal_th').data('template');
                var modalInstance = $modal.open({
                    template: temp,
                    controller: ModalTHCtrl,
                    resolve: {
                        servicios: function(){
                            return WSHotelService.GetRoomServices(id, roomTypeId);
                        }
                    },
                    size: "lg"
                });
                modalInstance.idhotel = id;
                modalInstance.roomTypeId = roomTypeId;

            }

            function ModalTHCtrl($scope, $modalInstance, servicios){
                $scope.servicios_h = servicios;

//                $modalInstance.opened.then(
//                        function(e){
//                            console.log($modalInstance);
//                            $scope.servicios_h = WSHotelService.GetRoomServices($modalInstance.idhotel, $modalInstance.roomTypeId);
//                        }
//                );


                $scope.cancel = function () {
                    $modalInstance.dismiss('cancel');
                };
            }


            ho.updateMarca = function (id) {
                var temp = $('#modal_marca').html();
                var modalInstance = $modal.open({
                    template: temp,
                    controller: ModalMarcaCtrl
                });
                modalInstance.idhotel = id;
            };

            function ModalMarcaCtrl($scope,$modalInstance){
                var marca = { nombre:"",estilo:"" };

                $scope.marcaAdded = function ( file, event, flow ){
                    marca.estilo = 'marca/'+file.name;

                    var formData = new FormData();

                    formData.append('file', file.file);
                    formData.append('entity', 'marca');

                    jQuery.ajax({
                        url: '{{ path('upload_images') }}',
                        data: formData,
                        enctype: 'multipart/form-data',
                        cache: false,
                        type: 'POST',
                        processData: false,
                        contentType: false,
                        success: function(result) {
                            console.log('OK');
                        },
                        error: function() {

                        }
                    });
                }

                $scope.saveMarca = function () {
                    WSHotelService.AddMarca($modalInstance.idhotel, marca);
                    $modalInstance.close();
                };

                $scope.cancel = function () {
                    $modalInstance.dismiss('cancel');
                };
            }

            ho.addGastronomia = function (id) {
                var temp = $('#modal_gastronomia').html();
                var modalInstance = $modal.open({
                    template: temp,
                    controller: ModalGastronomiaCtrl,
                    size: "lg"
                });
                modalInstance.idhotel = id;
            };

            ho.removeGastronomia = function(id_gastronomia){
                WSHotelService.removeGastronomia(ho.hotel.hotel_selected, id_gastronomia);
                selectId(ho.hotel.hotel_selected);
            }

            function ModalGastronomiaCtrl($scope,$modalInstance){
                var gast_images = {};

                $scope.imageAdded = function ( file, event, flow ){
                    gast_images.url = 'gastronomia/'+file.name;

                    var formData = new FormData();

                    formData.append('file', file.file);
                    formData.append('entity', 'gastronomia');

                    jQuery.ajax({
                        url: '{{ path('upload_images') }}',
                        data: formData,
                        enctype: 'multipart/form-data',
                        cache: false,
                        type: 'POST',
                        processData: false,
                        contentType: false,
                        success: function(result) {
                            console.log('OK');
                        },
                        error: function() {

                        }
                    });


                }

                //r.readAsBinaryString(f);

                $scope.saveGast = function () {
                    var gastronomia = {};

                    gastronomia.nombre = $scope.modal_nombre;
                    gastronomia.descripcion = $scope.modal_descripcion;
                    gastronomia.horario = $scope.modal_horario;
                    gastronomia.diasHabiles = $scope.modal_diasHabiles;
                    gastronomia.tipo = $scope.modal_tipo;


                    gast_images.nombre = $scope.modal_imagen_nombre;
                    gast_images.descripcion = $scope.modal_imagen_descripcion;

                    gastronomia.imagen = gast_images;

                    WSHotelService.AddGastronomia($modalInstance.idhotel,gastronomia);
                    selectId($modalInstance.idhotel);

                    $modalInstance.close();
                };

                $scope.cancel = function () {
                    $modalInstance.dismiss('cancel');
                };
            }

            ho.rules = {
                rules: {
                    fos_user_registration_form_username:{
                        required: true
                    },
                    fos_user_registration_form_email: {
                        required: true,
                        email: true
                    },
                    "#fos_user_registration_form_plainPassword_first": {
                        required: true
                    },
                    "#fos_user_registration_form_plainPassword_second": {
                        required: true,
                        //minlength: 6,
                        equalTo: "#fos_user_registration_form_plainPassword_first"
                    },
                    role:{
                        required: true
                    }
                },
                messages: {
                    fos_user_registration_form_plainPassword_second: {
                        required: "Por favor, repita la contraseña",
                        equalTo: "Por favor rectifique, las contraseñas no coinciden"
                    }
                }
            }

            function saveHotel(form) {
                if (ho.hotel.hotel_selected != -1){
                    if(form.validate()) {

                        var url = "{{ path('hotel_create') }}";

                        {#if ($stateParams.id) {#}
                            {#url = "{{ path('user_edit_user') }}";#}
                        {#}#}

                        var params = ho.hotel;
                        HoldOn.open();

                        $http.post(url, params).success(function ($rdata) {
                            if ($rdata.success) {
                                HoldOn.close();
                                SweetAlert.swal({
                                    title: "{{ 'Registro de Hotel' | trans }}",
                                    text: $rdata.sms,
                                    type: "success"
                                });
                                $state.go('hotel.administrar');
                                $scope.$emit('hotel-table-updated');
                                WSHotelService.Delete(ho.hotel.hotel_selected);
                            } else {
                                SweetAlert.swal({
                                    title: "Registro de Hotel",
                                    text: $rdata.sms,
                                    type: "error"
                                });
                            }
                        });
                    }
                }else{
                    SweetAlert.swal({
                        title: "{{ 'Seleccione un Hotel' | trans }}",
                        text: "{{ 'Para continuar debe seleccionar un Hotel' | trans }}",
                        type: "warning"
                    });
                }

            }
//            idKey='{expression}'
//            coords='{expression}'
//            click='{expression}'
//            options='{expression}'
//            events='{expression}'
//            control='{expression}'

        }

        //Marca
        function MarcaController($scope, $location, $http, NgTableParams) {
            var self = this;
            // Default values, usually fetched from the url
            // to allow direct access to the filtered table
            var sorting = {titulo: 'asc'};
            var page = 1;
            var count = 10;

            initData();

            function initData() {
                refreshData();
                $scope.$on('marca-table-updated', refresTable);
            }

            function refreshData() {

                self.tableParams = new NgTableParams(
                        { page: page, count: count, sorting: sorting },
                        {
                            total: 0,
                            getData: function (tableParams) {
                                return $http({
                                    url: '{{ path('marca_data') }}',
                                    method: 'GET',
                                    params: createQuery(tableParams)
                                }).then(
                                        // Success callback
                                        function (response) {
                                            var data = response.data;
                                            var marca = data._embedded.items;
                                            //UserService.Save(user);
                                            // Set the total number of products
                                            tableParams.total(data.total);
                                            return marca;
                                        }
                                );
                            }
                        }
                );
            }

            function refresTable(){
                self.tableParams.reload();
            }
        }

        //Marca
        function MotivosController($scope, $location, $http, NgTableParams) {
            var self = this;
            // Default values, usually fetched from the url
            // to allow direct access to the filtered table
            var sorting = {titulo: 'asc'};
            var page = 1;
            var count = 10;

            initData();

            function initData() {
                refreshData();
                $scope.$on('motivos-table-updated', refresTable);
            }

            function refreshData() {

                self.tableParams = new NgTableParams(
                        { page: page, count: count, sorting: sorting },
                        {
                            total: 0,
                            getData: function (tableParams) {
                                return $http({
                                    url: '{{ path('motivos_data') }}',
                                    method: 'GET',
                                    params: createQuery(tableParams)
                                }).then(
                                        // Success callback
                                        function (response) {
                                            var data = response.data;
                                            var motivos = data._embedded.items;
                                            //UserService.Save(user);
                                            // Set the total number of products
                                            tableParams.total(data.total);
                                            return motivos;
                                        }
                                );
                            }
                        }
                );
            }

            function refresTable(){
                self.tableParams.reload();
            }
        }

        //Marca
        function RedesSocialesController($scope, $location, $http, NgTableParams) {
            var self = this;
            // Default values, usually fetched from the url
            // to allow direct access to the filtered table
            var sorting = {titulo: 'asc'};
            var page = 1;
            var count = 10;

            initData();

            function initData() {
                refreshData();
                $scope.$on('redes_sociales-table-updated', refresTable);
            }

            function refreshData() {

                self.tableParams = new NgTableParams(
                        { page: page, count: count, sorting: sorting },
                        {
                            total: 0,
                            getData: function (tableParams) {
                                return $http({
                                    url: '{{ path('redes_sociales_data') }}',
                                    method: 'GET',
                                    params: createQuery(tableParams)
                                }).then(
                                        // Success callback
                                        function (response) {
                                            var data = response.data;
                                            var redes_sociales = data._embedded.items;
                                            //UserService.Save(user);
                                            // Set the total number of products
                                            tableParams.total(data.total);
                                            return redes_sociales;
                                        }
                                );
                            }
                        }
                );
            }

            function refresTable(){
                self.tableParams.reload();
            }
        }

        //Marca
        function GastronomiaController($scope, $location, $http, NgTableParams) {
            var self = this;
            // Default values, usually fetched from the url
            // to allow direct access to the filtered table
            var sorting = {titulo: 'asc'};
            var page = 1;
            var count = 10;

            initData();

            function initData() {
                refreshData();
                $scope.$on('gastronomia-table-updated', refresTable);
            }

            function refreshData() {

                self.tableParams = new NgTableParams(
                        { page: page, count: count, sorting: sorting },
                        {
                            total: 0,
                            getData: function (tableParams) {
                                return $http({
                                    url: '{{ path('gastronomia_data') }}',
                                    method: 'GET',
                                    params: createQuery(tableParams)
                                }).then(
                                        // Success callback
                                        function (response) {
                                            var data = response.data;
                                            var gastronomia = data._embedded.items;
                                            //UserService.Save(user);
                                            // Set the total number of products
                                            tableParams.total(data.total);
                                            return gastronomia;
                                        }
                                );
                            }
                        }
                );
            }

            function refresTable(){
                self.tableParams.reload();
            }
        }

        //Marca
        function FaqController($scope, $location, $http, NgTableParams) {
            var self = this;
            // Default values, usually fetched from the url
            // to allow direct access to the filtered table
            var sorting = {titulo: 'asc'};
            var page = 1;
            var count = 10;

            initData();

            function initData() {
                refreshData();
                $scope.$on('faq-table-updated', refresTable);
            }

            function refreshData() {

                self.tableParams = new NgTableParams(
                        { page: page, count: count, sorting: sorting },
                        {
                            total: 0,
                            getData: function (tableParams) {
                                return $http({
                                    url: '{{ path('faq_data') }}',
                                    method: 'GET',
                                    params: createQuery(tableParams)
                                }).then(
                                        // Success callback
                                        function (response) {
                                            var data = response.data;
                                            var faq = data._embedded.items;
                                            //UserService.Save(user);
                                            // Set the total number of products
                                            tableParams.total(data.total);
                                            return faq;
                                        }
                                );
                            }
                        }
                );
            }

            function refresTable(){
                self.tableParams.reload();
            }
        }

        //Marca
        function HafacilidadesController($scope, $location, $http, NgTableParams) {
            var self = this;
            // Default values, usually fetched from the url
            // to allow direct access to the filtered table
            var sorting = {titulo: 'asc'};
            var page = 1;
            var count = 10;

            initData();

            function initData() {
                refreshData();
                $scope.$on('hafacilidades-table-updated', refresTable);
            }

            function refreshData() {

                self.tableParams = new NgTableParams(
                        { page: page, count: count, sorting: sorting },
                        {
                            total: 0,
                            getData: function (tableParams) {
                                return $http({
                                    url: '{{ path('hafacilidades_data') }}',
                                    method: 'GET',
                                    params: createQuery(tableParams)
                                }).then(
                                        // Success callback
                                        function (response) {
                                            var data = response.data;
                                            var hafacilidades = data._embedded.items;
                                            //UserService.Save(user);
                                            // Set the total number of products
                                            tableParams.total(data.total);
                                            return hafacilidades;
                                        }
                                );
                            }
                        }
                );
            }

            function refresTable(){
                self.tableParams.reload();
            }
        }

        //Marca
        function ReservaController($scope, $location, $http, NgTableParams) {
            var self = this;
            // Default values, usually fetched from the url
            // to allow direct access to the filtered table
            var sorting = {titulo: 'asc'};
            var page = 1;
            var count = 10;

            initData();

            function initData() {
                refreshData();
                $scope.$on('reserva-table-updated', refresTable);
            }

            function refreshData() {

                self.tableParams = new NgTableParams(
                        { page: page, count: count, sorting: sorting },
                        {
                            total: 0,
                            getData: function (tableParams) {
                                return $http({
                                    url: '{{ path('reserva_data') }}',
                                    method: 'GET',
                                    params: createQuery(tableParams)
                                }).then(
                                        // Success callback
                                        function (response) {
                                            var data = response.data;
                                            var reserva = data._embedded.items;
                                            //UserService.Save(user);
                                            // Set the total number of products
                                            tableParams.total(data.total);
                                            return reserva;
                                        }
                                );
                            }
                        }
                );
            }

            function refresTable(){
                self.tableParams.reload();
            }
        }

        //Marca
        function ServiciosController($scope, $location, $http, NgTableParams) {
            var self = this;
            // Default values, usually fetched from the url
            // to allow direct access to the filtered table
            var sorting = {titulo: 'asc'};
            var page = 1;
            var count = 10;

            initData();

            function initData() {
                refreshData();
                $scope.$on('services-table-updated', refresTable);
            }

            function refreshData() {

                self.tableParams = new NgTableParams(
                        { page: page, count: count, sorting: sorting },
                        {
                            total: 0,
                            getData: function (tableParams) {
                                return $http({
                                            url: '{{ path('servicios_data') }}',
                                            method: 'GET',
                                            params: createQuery(tableParams)
                                        }).then(
                                            // Success callback
                                            function (response) {
                                                var data = response.data;
                                                var servicios = data._embedded.items;
                                                //UserService.Save(user);
                                                // Set the total number of products
                                                tableParams.total(data.total);
                                                return servicios;
                                            }
                                        );
                            }
                        }
                );
            }

            function refresTable(){
                self.tableParams.reload();
            }
        }

        //Marca
        function UserController($scope, $http, NgTableParams, UserService, SweetAlert) {
            // Default values, usually fetched from the url
            // to allow direct access to the filtered table
            var sorting = {titulo: 'asc'};
            var page = 1;
            var count = 10;

            var uc = this;

            uc.deleteUser = deleteUser;

            initData();

            function initData() {
                refreshData();
                $scope.$on('user-table-updated', refresTable);
            }

            function refreshData() {

                uc.tableParams = new NgTableParams(
                        {page: page, count: count, sorting: sorting},
                        {
                            total: 0,
                            getData: function (tableParams) {
                                return $http({
                                    url: '{{ path('user_data') }}',
                                    method: 'GET',
                                    params: createQuery(tableParams)
                                }).then(
                                        // Success callback
                                        function (response) {
                                            var data = response.data;
                                            var user = data._embedded.items;
                                            UserService.Save(user);
                                            // Set the total number of products
                                            tableParams.total(data.total);
                                            return user;
                                        }
                                );
                            }
                        }
                );
            }

            function refresTable(){
                uc.tableParams.reload();
            }

            function deleteUser(id) {
                SweetAlert.swal({
                            title: "Seguro?",
                            text: "Desea eliminar este usuario!",
                            type: "warning",
                            showCancelButton: true,
                            confirmButtonColor: "#DD6B55",
                            confirmButtonText: "Si",
                            cancelButtonText: "No",
                            closeOnConfirm: false,
                            closeOnCancel: false
                        },
                        function (isConfirm) {
                            if (isConfirm) {
                                $http.post('{{ path('user_delete_user') }}', {'id': id}).success(
                                        function (data) {
                                            SweetAlert.swal({
                                                title: "OK",
                                                text: data.sms,
                                                type: "success"
                                            });
                                            uc.tableParams.reload();
                                        }
                                );
                            }
                        });
            }
        }

        //Marca
        function UserControllerAddEditController($scope, $stateParams, $http, ngTableParams, $state, SweetAlert, UserService) {
            var uc = this;
            uc.title = '{{ 'Nuevo Usuario' | trans }}';

            uc.user = {};
            uc.saveUser = saveUser;


            initController();

            function initController() {
                if ($stateParams.id) {
                    uc.title = 'Editar Usuario';
                    uc.user = UserService.GetById($stateParams.id);
                }
            }

            uc.rules = {
                rules: {
                    fos_user_registration_form_username:{
                        required: true
                    },
                    fos_user_registration_form_email: {
                        required: true,
                        email: true
                    },
                    "#fos_user_registration_form_plainPassword_first": {
                        required: true
                    },
                    "#fos_user_registration_form_plainPassword_second": {
                        required: true,
                        //minlength: 6,
                        equalTo: "#fos_user_registration_form_plainPassword_first"
                    },
                    role:{
                        required: true
                    }
                },
                messages: {
                    fos_user_registration_form_plainPassword_second: {
                        required: "Por favor, repita la contraseña",
                        equalTo: "Por favor rectifique, las contraseñas no coinciden"
                    }
                }
            }

            function saveUser(form) {

                if(form.validate()) {

                    var url = "{{ path('user_save_user') }}";

                    if ($stateParams.id) {
                        url = "{{ path('user_edit_user') }}";
                    }

                    var params = uc.user;

                    $http.post(url, params).success(function ($rdata) {
                        if ($rdata.success) {
                            SweetAlert.swal({
                                title: "Registro de Usuario",
                                text: $rdata.sms,
                                type: "success"
                            });
                            $state.go('user.administrar');
                            $scope.$emit('user-table-updated');
                        } else {
                            SweetAlert.swal({
                                title: "Registro de Usuario",
                                text: $rdata.sms,
                                type: "error"
                            });
                        }
                    });
                }
            }

        }

        /**
         *
         * Pass all functions into module
         */
        angular
                .module('inspinia')
                .controller('CommentController', CommentController)

                .controller('HotelController', HotelController)
                .controller('HotelController.AddEditController', HotelControllerAddEditController)

                .controller('MarcaController', MarcaController)

                .controller('MotivosController', MotivosController)

                .controller('RedesSocialesController', RedesSocialesController)

                .controller('GastronomiaController', GastronomiaController)

                .controller('FaqController', FaqController)

                .controller('HafacilidadesController', HafacilidadesController)

                .controller('ReservaController', ReservaController)

                .controller('ServiciosController', ServiciosController)

                .controller('UserController', UserController)
                .controller('UserController.AddEditController', UserControllerAddEditController)
        ;

</script>